---
title: "Benchmarking range-like libraries"
subtitle: "Which is better?"
author: "Marc Paterno"
institute: "Fermi National Accelerator Laboratory"
date: "`r Sys.Date()`"
date-format: long
format:
  revealjs:
    height: 1080
    width: 1920
    standalone: true
    footer: "{{< meta title >}} | {{< meta author >}}"
    highlight-style: arrow
    include-after-body: clean_title_slide.html
    margin: 0.05
    max-scale: 4.0
    min-scale: 0.05
    #navigation-mode: linear
    slide-number: true
    theme: [serif, custom.scss]
    transition: fade
    background-transition: fade
    template-partials:
      - title-slide.html
---

class: center, inverse, bottom
background-image: url(https://upload.wikimedia.org/wikipedia/commons/0/04/SR-71_LASRE_cold_test.jpg)
background-size: cover

# FASTER IS BETTER

```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
library(tidyverse)
library(mfptools)
source("functions.R")
```

---
class: center, inverse, bottom
background-image: url(https://cdn.pixabay.com/photo/2016/11/25/07/00/isolated-1857732_960_720.png)
background-size: cover

# CLEARER IS BETTER

---

class: inverse, center 

# *Benchmark* code to see what goes fastest

## The only way to be sure

--

## You can tell some things from the assembly language.

--

## But that only really works to show the assembly language is identical.

--

## Or nearly identical.

--

## And you need to be an expert.

--

## I'm not an expert.

---

class: inverse, center

# Write code that is clear.

--

## It is more likely to be correct.

--

## It is easier to update for new functionality.

--

## It is less likely to be thrown away by your colleagues.


---
class: center, inverse, bottom
background-image: url(https://get.pxhere.com/photo/light-number-red-color-machine-blue-toy-2014-illustration-robot-organ-365-screenshot-3652014-365the2014edition-redvsblue-themandus-mecha-284332.jpg)
background-size: cover

# THE CONTENDERS

---

class: middle

* `range-v3` (the precursor to C++20's `<range>`)
* Functional plus
* pipes
* rangeless

---

class: center, middle

# The first task

For integers from 0 up to *count*,
calculate the sum of the lengths
of the string representation
of the result of multiplying each value by 3,
but ignoring those values
for which the multiplication gives an odd number result.

---

# Using explicit loops

```c++
int result = 0;
for (int i = 0; i != count; ++i) {
  auto const x = i * 3;
  if (x % 2 == 0) { // ignore odd == keep even
    result += std::to_string(x).size();
  }
}
```

---
# Using `range v3`

```c++
auto times_3 = [](int i){return 3 * i;};
auto is_odd_int = [](int i){return i % 2 != 0;};
auto as_string_length = [](int i){return std::to_string(i).size();};

auto const result =
  accumulate( views::ints(0, unreachable)
            | views::take(count)
            | views::transform(times_3)
            | views::remove_if(is_odd_int)
            | views::transform(as_string_length)
            , 0);
```

---
# Using `functionalplus`

```c++
auto times_3 = [](int i){return 3 * i;};
auto is_odd_int = [](int i){return i % 2 != 0;};
auto as_string_length = [](int i){return std::to_string(i).size();};


auto const result = 
  fwd::apply(numbers(0, count)
            , fwd::transform(times_3)
            , fwd::drop_if(is_odd_int)
            , fwd::transform(as_string_length)
            , fwd::sum());
```

---
# Timing results

```{r, echo=FALSE, include=FALSE}
d <- mfptools::read_benchmark("benchmark-01.txt") |>
  adjust_raw_df()
```

```{r, echo=FALSE, out.width="90%", fig.asp=1/2, fig.retina=2, fig.align='center'}
ggplot(d, aes(size, time, color=fcn)) +
  geom_point() +
  scale_x_log10(label = scales::comma) +
  scale_y_log10(label = scales::comma) +
  scale_color_discrete(drop=FALSE) +
  labs(x="Loop count",
       y="Time (ns)")
```

---

# Tables!

```{r}
d %>% kableExtra::kable()
```

---
# Ratios

```{r, echo=FALSE, include=FALSE}
tmp <- filter(d, fcn=="forloop") %>% select(size, t0=time)
d <- left_join(d, tmp) %>%
     mutate(ratio = time/t0)
rm(tmp)
```

```{r, echo=FALSE, out.width="90%", fig.asp=1/2, fig.retina=2, fig.align='center'}
ggplot(d, aes(size, ratio, color=fcn)) +
  geom_point() +
  scale_x_log10(label = scales::comma) +
  scale_y_log10(label = scales::comma) +
  scale_color_discrete(drop=FALSE) +
  labs(x="Loop count",
       y="normalized time")  
```

---
# For loop and `range`
```{r, echo=FALSE, out.width="90%", fig.asp=1/2, fig.retina=2, fig.align='center'}
filter(d, fcn != "fplus") %>%
ggplot(aes(size, ratio, color=fcn)) +
  geom_point() +
  scale_x_log10(label = scales::comma) +
  scale_y_log10(label = scales::comma) +
  scale_color_discrete(drop=FALSE) +
  labs(x="Loop count",
       y="normalized time")
```
